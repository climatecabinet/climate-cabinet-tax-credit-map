# Generated by Django 5.0.4 on 2024-05-04 07:37

import django.contrib.gis.db.models.fields
from django.contrib.postgres.operations import CreateExtension, TrigramExtension
import django.db.models.deletion
import django.db.models.functions.comparison
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        CreateExtension("postgis"),
        TrigramExtension(),
        migrations.CreateModel(
            name="Geography",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255)),
                ("fips", models.CharField(blank=True, default="", max_length=255)),
                (
                    "fips_pattern",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("STATE(2)", "State"),
                            ("STATE(2) + COUNTY(3)", "State County"),
                            (
                                "STATE(2) + COUNTY(3) + COUNTY SUBDIVISION(5)",
                                "State County County Subdivision",
                            ),
                            ("STATE(2) + COUNTY(3) + TRACT(6)", "State County Tract"),
                            ("STATE(2) + PLACE(5)", "State Place"),
                        ],
                        default="",
                    ),
                ),
                (
                    "geography_type",
                    models.CharField(
                        choices=[
                            ("county", "County"),
                            ("distressed", "Distressed"),
                            ("energy", "Energy"),
                            ("justice40", "Justice40"),
                            ("low-income", "Low Income"),
                            ("municipality", "Municipality"),
                            ("municipal utility", "Municipal Utility"),
                            ("rural cooperative", "Rural Cooperative"),
                            ("state", "State"),
                        ]
                    ),
                ),
                ("population", models.IntegerField(null=True)),
                (
                    "population_strategy",
                    models.CharField(
                        choices=[
                            (
                                "Population-Weighted Block Group Centroid Spatial Join",
                                "Centroid Sjoin",
                            ),
                            ("FIPS Code Match", "Fips"),
                        ]
                    ),
                ),
                ("as_of", models.DateField()),
                ("published_on", models.DateField(null=True)),
                ("source", models.TextField()),
                (
                    "programs",
                    models.GeneratedField(
                        db_persist=True,
                        expression=django.db.models.functions.comparison.Cast(
                            models.Case(
                                models.When(
                                    geography_type="distressed",
                                    then=models.Value(
                                        '["Neighborhood Access & Equity Grant", "Solar For All"]'
                                    ),
                                ),
                                models.When(
                                    geography_type="energy",
                                    then=models.Value(
                                        '["Direct Pay Clean Energy Investment Tax Credits", "Direct Pay Clean Energy Production Tax Credits"]'
                                    ),
                                ),
                                models.When(
                                    geography_type="justice40",
                                    then=models.Value('["Solar For All"]'),
                                ),
                                models.When(
                                    geography_type="low-income",
                                    then=models.Value(
                                        '["Alternative Fuel Refueling Property Credit", "Direct Pay Clean Energy Investment Tax Credits", "Direct Pay Clean Energy Production Tax Credits", "Solar For All"]'
                                    ),
                                ),
                                default=models.Value("[]"),
                                output_field=models.CharField(),
                            ),
                            output_field=models.JSONField(),
                        ),
                        output_field=models.JSONField(),
                    ),
                ),
                (
                    "geometry",
                    django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326),
                ),
            ],
            options={
                "db_table": "tax_credit_geography",
            },
        ),
        migrations.CreateModel(
            name="TargetBonusGeographyOverlap",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("population", models.IntegerField()),
                (
                    "population_strategy",
                    models.CharField(
                        choices=[
                            (
                                "Population-Weighted Block Group Centroid Spatial Join",
                                "Centroid Sjoin",
                            ),
                            ("FIPS Code Match", "Fips"),
                        ]
                    ),
                ),
            ],
            options={
                "db_table": "tax_credit_target_bonus_overlap",
            },
        ),
        migrations.AddConstraint(
            model_name="geography",
            constraint=models.UniqueConstraint(
                fields=("name", "fips", "geography_type"), name="unique_geography"
            ),
        ),
        migrations.AddField(
            model_name="targetbonusgeographyoverlap",
            name="bonus",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="bonus_geo_set",
                to="tax_credit.geography",
            ),
        ),
        migrations.AddField(
            model_name="targetbonusgeographyoverlap",
            name="target",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="target_geo_set",
                to="tax_credit.geography",
            ),
        ),
        migrations.AddConstraint(
            model_name="targetbonusgeographyoverlap",
            constraint=models.UniqueConstraint(
                fields=("target", "bonus"), name="unique_target_bonus_overlap"
            ),
        ),
    ]
