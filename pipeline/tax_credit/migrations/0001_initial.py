# Generated by Django 5.0.2 on 2024-02-09 17:32

import django.contrib.gis.db.models.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CensusBlockGroup',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('fips', models.CharField(max_length=255)),
                ('centroid', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('population', models.IntegerField()),
                ('year', models.IntegerField()),
            ],
            options={
                'db_table': 'tax_credit_census_block_group',
            },
        ),
        migrations.CreateModel(
            name='Geography',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('fips', models.CharField(blank=True, default='', max_length=255)),
                ('fips_pattern', models.CharField(blank=True, choices=[('STATE(2)', 'State'), ('STATE(2) + COUNTY(3)', 'State County'), ('STATE(2) + COUNTY(3) + COUNTY SUBDIVISION(5)', 'State County County Subdivision'), ('STATE(2) + COUNTY(3) + TRACT(6)', 'State County Tract'), ('STATE(2) + PLACE(5)', 'State Place')], default='')),
                ('geography_type', models.CharField(choices=[('county', 'County'), ('distressed', 'Distressed'), ('energy', 'Energy'), ('justice40', 'Justice40'), ('low-income', 'Low Income'), ('municipality', 'Municipality'), ('municipal utility', 'Municipal Utility'), ('rural cooperative', 'Rural Cooperative'), ('state', 'State')])),
                ('as_of', models.DateField()),
                ('published_on', models.DateField(null=True)),
                ('source', models.TextField()),
                ('geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                'db_table': 'tax_credit_geography',
            },
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('agency', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('base_benefit', models.TextField()),
                ('bonus_amounts', models.JSONField()),
            ],
            options={
                'db_table': 'tax_credit_program',
            },
        ),
        migrations.CreateModel(
            name='TargetBonusAssoc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tax_credit_target_bonus_assoc',
            },
        ),
        migrations.AddConstraint(
            model_name='censusblockgroup',
            constraint=models.UniqueConstraint(fields=('fips', 'year'), name='unique_census_block_group'),
        ),
        migrations.AddConstraint(
            model_name='geography',
            constraint=models.UniqueConstraint(fields=('name', 'geography_type', 'fips'), name='unique_geography'),
        ),
        migrations.AddField(
            model_name='targetbonusassoc',
            name='bonus_geography',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bonus_geo_set', to='tax_credit.geography'),
        ),
        migrations.AddField(
            model_name='targetbonusassoc',
            name='target_geography',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target_geo_set', to='tax_credit.geography'),
        ),
        migrations.AddConstraint(
            model_name='targetbonusassoc',
            constraint=models.UniqueConstraint(fields=('target_geography', 'bonus_geography'), name='unique_target_bonus_geography_association'),
        ),
    ]
